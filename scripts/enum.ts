export enum NiceGender {
    MALE = "male",
    FEMALE = "female",
    OTHER = "unknown",
}

export enum NiceSvtType {
    NORMAL = "normal",
    HEROINE = "heroine",
    COMBINE_MATERIAL = "combineMaterial",
    ENEMY = "enemy",
    ENEMY_COLLECTION = "enemyCollection",
    SERVANT_EQUIP = "servantEquip",
    STATUS_UP = "statusUp",
    SVT_EQUIP_MATERIAL = "svtEquipMaterial",
    ENEMY_COLLECTION_DETAIL = "enemyCollectionDetail",
    ALL = "all",
    COMMAND_CODE = "commandCode",
    SVT_MATERIAL_TD = "svtMaterialTd",
}

export enum NiceSvtFlag {
    ONLY_USE_FOR_NPC = "onlyUseForNpc",
    SVT_EQUIP_FRIEND_SHIP = "svtEquipFriendShip",
    IGNORE_COMBINE_LIMIT_SPECIAL = "ignoreCombineLimitSpecial",
    SVT_EQUIP_EXP = "svtEquipExp",
    SVT_EQUIP_CHOCOLATE = "svtEquipChocolate",
    NORMAL = "normal",
    GOETIA = "goetia",
    MAT_DROP_RATE_UP_CE = "matDropRateUpCe",
}

export enum NiceFuncType {
    NONE = "none",
    ADD_STATE = "addState",
    SUB_STATE = "subState",
    DAMAGE = "damage",
    DAMAGE_NP = "damageNp",
    GAIN_STAR = "gainStar",
    GAIN_HP = "gainHp",
    GAIN_NP = "gainNp",
    LOSS_NP = "lossNp",
    SHORTEN_SKILL = "shortenSkill",
    EXTEND_SKILL = "extendSkill",
    RELEASE_STATE = "releaseState",
    LOSS_HP = "lossHp",
    INSTANT_DEATH = "instantDeath",
    DAMAGE_NP_PIERCE = "damageNpPierce",
    DAMAGE_NP_INDIVIDUAL = "damageNpIndividual",
    ADD_STATE_SHORT = "addStateShort",
    GAIN_HP_PER = "gainHpPer",
    DAMAGE_NP_STATE_INDIVIDUAL = "damageNpStateIndividual",
    HASTEN_NPTURN = "hastenNpturn",
    DELAY_NPTURN = "delayNpturn",
    DAMAGE_NP_HPRATIO_HIGH = "damageNpHpratioHigh",
    DAMAGE_NP_HPRATIO_LOW = "damageNpHpratioLow",
    CARD_RESET = "cardReset",
    REPLACE_MEMBER = "replaceMember",
    LOSS_HP_SAFE = "lossHpSafe",
    DAMAGE_NP_COUNTER = "damageNpCounter",
    DAMAGE_NP_STATE_INDIVIDUAL_FIX = "damageNpStateIndividualFix",
    DAMAGE_NP_SAFE = "damageNpSafe",
    CALL_SERVANT = "callServant",
    PT_SHUFFLE = "ptShuffle",
    LOSS_STAR = "lossStar",
    CHANGE_SERVANT = "changeServant",
    CHANGE_BG = "changeBg",
    DAMAGE_VALUE = "damageValue",
    WITHDRAW = "withdraw",
    FIX_COMMANDCARD = "fixCommandcard",
    SHORTEN_BUFFTURN = "shortenBuffturn",
    EXTEND_BUFFTURN = "extendBuffturn",
    SHORTEN_BUFFCOUNT = "shortenBuffcount",
    EXTEND_BUFFCOUNT = "extendBuffcount",
    CHANGE_BGM = "changeBgm",
    DISPLAY_BUFFSTRING = "displayBuffstring",
    RESURRECTION = "resurrection",
    GAIN_NP_BUFF_INDIVIDUAL_SUM = "gainNpBuffIndividualSum",
    SET_SYSTEM_ALIVE_FLAG = "setSystemAliveFlag",
    FORCE_INSTANT_DEATH = "forceInstantDeath",
    DAMAGE_NP_RARE = "damageNpRare",
    GAIN_NP_FROM_TARGETS = "gainNpFromTargets",
    GAIN_HP_FROM_TARGETS = "gainHpFromTargets",
    LOSS_HP_PER = "lossHpPer",
    LOSS_HP_PER_SAFE = "lossHpPerSafe",
    SHORTEN_USER_EQUIP_SKILL = "shortenUserEquipSkill",
    QUICK_CHANGE_BG = "quickChangeBg",
    SHIFT_SERVANT = "shiftServant",
    DAMAGE_NP_AND_CHECK_INDIVIDUALITY = "damageNpAndCheckIndividuality",
    ABSORB_NPTURN = "absorbNpturn",
    OVERWRITE_DEAD_TYPE = "overwriteDeadType",
    FORCE_ALL_BUFF_NOACT = "forceAllBuffNoact",
    BREAK_GAUGE_UP = "breakGaugeUp",
    BREAK_GAUGE_DOWN = "breakGaugeDown",
    MOVE_TO_LAST_SUBMEMBER = "moveToLastSubmember",
    EXTEND_USER_EQUIP_SKILL = "extendUserEquipSkill",
    UPDATE_ENEMY_ENTRY_MAX_COUNT_EACH_TURN = "updateEnemyEntryMaxCountEachTurn",
    EXP_UP = "expUp",
    QP_UP = "qpUp",
    DROP_UP = "dropUp",
    FRIEND_POINT_UP = "friendPointUp",
    EVENT_DROP_UP = "eventDropUp",
    EVENT_DROP_RATE_UP = "eventDropRateUp",
    EVENT_POINT_UP = "eventPointUp",
    EVENT_POINT_RATE_UP = "eventPointRateUp",
    TRANSFORM_SERVANT = "transformServant",
    QP_DROP_UP = "qpDropUp",
    SERVANT_FRIENDSHIP_UP = "servantFriendshipUp",
    USER_EQUIP_EXP_UP = "userEquipExpUp",
    CLASS_DROP_UP = "classDropUp",
    ENEMY_ENCOUNT_COPY_RATE_UP = "enemyEncountCopyRateUp",
    ENEMY_ENCOUNT_RATE_UP = "enemyEncountRateUp",
    ENEMY_PROB_DOWN = "enemyProbDown",
    GET_REWARD_GIFT = "getRewardGift",
    SEND_SUPPORT_FRIEND_POINT = "sendSupportFriendPoint",
    MOVE_POSITION = "movePosition",
    REVIVAL = "revival",
    DAMAGE_NP_INDIVIDUAL_SUM = "damageNpIndividualSum",
    DAMAGE_VALUE_SAFE = "damageValueSafe",
    FRIEND_POINT_UP_DUPLICATE = "friendPointUpDuplicate",
    MOVE_STATE = "moveState",
    CHANGE_BGM_COSTUME = "changeBgmCostume",
    FUNC_126 = "func126",
    FUNC_127 = "func127",
    UPDATE_ENTRY_POSITIONS = "updateEntryPositions",
    BUDDY_POINT_UP = "buddyPointUp",
    ADD_FIELD_CHANGE_TO_FIELD = "addFieldChangeToField",
    SUB_FIELD_BUFF = "subFieldBuff",
    EVENT_FORTIFICATION_POINT_UP = "eventFortificationPointUp",
    GAIN_NP_INDIVIDUAL_SUM = "gainNpIndividualSum",
    SET_QUEST_ROUTE_FLAG = "setQuestRouteFlag",
    LAST_USE_PLAYER_SKILL_COPY = "lastUsePlayerSkillCopy",
    CHANGE_ENEMY_MASTER_FACE = "changeEnemyMasterFace",
    DAMAGE_VALUE_SAFE_ONCE = "damageValueSafeOnce",
}

export enum NiceFuncTargetType {
    SELF = "self",
    PT_ONE = "ptOne",
    PT_ANOTHER = "ptAnother",
    PT_ALL = "ptAll",
    ENEMY = "enemy",
    ENEMY_ANOTHER = "enemyAnother",
    ENEMY_ALL = "enemyAll",
    PT_FULL = "ptFull",
    ENEMY_FULL = "enemyFull",
    PT_OTHER = "ptOther",
    PT_ONE_OTHER = "ptOneOther",
    PT_RANDOM = "ptRandom",
    ENEMY_OTHER = "enemyOther",
    ENEMY_RANDOM = "enemyRandom",
    PT_OTHER_FULL = "ptOtherFull",
    ENEMY_OTHER_FULL = "enemyOtherFull",
    PTSELECT_ONE_SUB = "ptselectOneSub",
    PTSELECT_SUB = "ptselectSub",
    PT_ONE_ANOTHER_RANDOM = "ptOneAnotherRandom",
    PT_SELF_ANOTHER_RANDOM = "ptSelfAnotherRandom",
    ENEMY_ONE_ANOTHER_RANDOM = "enemyOneAnotherRandom",
    PT_SELF_ANOTHER_FIRST = "ptSelfAnotherFirst",
    PT_SELF_BEFORE = "ptSelfBefore",
    PT_SELF_AFTER = "ptSelfAfter",
    PT_SELF_ANOTHER_LAST = "ptSelfAnotherLast",
    COMMAND_TYPE_SELF_TREASURE_DEVICE = "commandTypeSelfTreasureDevice",
    FIELD_OTHER = "fieldOther",
    ENEMY_ONE_NO_TARGET_NO_ACTION = "enemyOneNoTargetNoAction",
    PT_ONE_HP_LOWEST_VALUE = "ptOneHpLowestValue",
    PT_ONE_HP_LOWEST_RATE = "ptOneHpLowestRate",
    ENEMY_RANGE = "enemyRange",
}

export enum NiceBuffType {
    NONE = "none",
    UP_COMMANDATK = "upCommandatk",
    UP_STARWEIGHT = "upStarweight",
    UP_CRITICALPOINT = "upCriticalpoint",
    DOWN_CRITICALPOINT = "downCriticalpoint",
    REGAIN_NP = "regainNp",
    REGAIN_STAR = "regainStar",
    REGAIN_HP = "regainHp",
    REDUCE_HP = "reduceHp",
    UP_ATK = "upAtk",
    DOWN_ATK = "downAtk",
    UP_DAMAGE = "upDamage",
    DOWN_DAMAGE = "downDamage",
    ADD_DAMAGE = "addDamage",
    SUB_DAMAGE = "subDamage",
    UP_NPDAMAGE = "upNpdamage",
    DOWN_NPDAMAGE = "downNpdamage",
    UP_DROPNP = "upDropnp",
    UP_CRITICALDAMAGE = "upCriticaldamage",
    DOWN_CRITICALDAMAGE = "downCriticaldamage",
    UP_SELFDAMAGE = "upSelfdamage",
    DOWN_SELFDAMAGE = "downSelfdamage",
    ADD_SELFDAMAGE = "addSelfdamage",
    SUB_SELFDAMAGE = "subSelfdamage",
    AVOIDANCE = "avoidance",
    BREAK_AVOIDANCE = "breakAvoidance",
    INVINCIBLE = "invincible",
    UP_GRANTSTATE = "upGrantstate",
    DOWN_GRANTSTATE = "downGrantstate",
    UP_TOLERANCE = "upTolerance",
    DOWN_TOLERANCE = "downTolerance",
    AVOID_STATE = "avoidState",
    DONOT_ACT = "donotAct",
    DONOT_SKILL = "donotSkill",
    DONOT_NOBLE = "donotNoble",
    DONOT_RECOVERY = "donotRecovery",
    DISABLE_GENDER = "disableGender",
    GUTS = "guts",
    UP_HATE = "upHate",
    ADD_INDIVIDUALITY = "addIndividuality",
    SUB_INDIVIDUALITY = "subIndividuality",
    UP_DEFENCE = "upDefence",
    DOWN_DEFENCE = "downDefence",
    UP_COMMANDSTAR = "upCommandstar",
    UP_COMMANDNP = "upCommandnp",
    UP_COMMANDALL = "upCommandall",
    DOWN_COMMANDALL = "downCommandall",
    DOWN_STARWEIGHT = "downStarweight",
    REDUCE_NP = "reduceNp",
    DOWN_DROPNP = "downDropnp",
    UP_GAIN_HP = "upGainHp",
    DOWN_GAIN_HP = "downGainHp",
    DOWN_COMMANDATK = "downCommandatk",
    DOWN_COMMANSTAR = "downCommanstar",
    DOWN_COMMANDNP = "downCommandnp",
    UP_CRITICALRATE = "upCriticalrate",
    DOWN_CRITICALRATE = "downCriticalrate",
    PIERCE_INVINCIBLE = "pierceInvincible",
    AVOID_INSTANTDEATH = "avoidInstantdeath",
    UP_RESIST_INSTANTDEATH = "upResistInstantdeath",
    UP_NONRESIST_INSTANTDEATH = "upNonresistInstantdeath",
    DELAY_FUNCTION = "delayFunction",
    REGAIN_NP_USED_NOBLE = "regainNpUsedNoble",
    DEAD_FUNCTION = "deadFunction",
    UP_MAXHP = "upMaxhp",
    DOWN_MAXHP = "downMaxhp",
    ADD_MAXHP = "addMaxhp",
    SUB_MAXHP = "subMaxhp",
    BATTLESTART_FUNCTION = "battlestartFunction",
    WAVESTART_FUNCTION = "wavestartFunction",
    SELFTURNEND_FUNCTION = "selfturnendFunction",
    DAMAGE_FUNCTION = "damageFunction",
    UP_GIVEGAIN_HP = "upGivegainHp",
    DOWN_GIVEGAIN_HP = "downGivegainHp",
    COMMANDATTACK_FUNCTION = "commandattackFunction",
    DEADATTACK_FUNCTION = "deadattackFunction",
    UP_SPECIALDEFENCE = "upSpecialdefence",
    DOWN_SPECIALDEFENCE = "downSpecialdefence",
    UP_DAMAGEDROPNP = "upDamagedropnp",
    DOWN_DAMAGEDROPNP = "downDamagedropnp",
    ENTRY_FUNCTION = "entryFunction",
    UP_CHAGETD = "upChagetd",
    REFLECTION_FUNCTION = "reflectionFunction",
    UP_GRANT_SUBSTATE = "upGrantSubstate",
    DOWN_GRANT_SUBSTATE = "downGrantSubstate",
    UP_TOLERANCE_SUBSTATE = "upToleranceSubstate",
    DOWN_TOLERANCE_SUBSTATE = "downToleranceSubstate",
    UP_GRANT_INSTANTDEATH = "upGrantInstantdeath",
    DOWN_GRANT_INSTANTDEATH = "downGrantInstantdeath",
    GUTS_RATIO = "gutsRatio",
    UP_DEFENCECOMMANDALL = "upDefencecommandall",
    DOWN_DEFENCECOMMANDALL = "downDefencecommandall",
    OVERWRITE_BATTLECLASS = "overwriteBattleclass",
    OVERWRITE_CLASSRELATIO_ATK = "overwriteClassrelatioAtk",
    OVERWRITE_CLASSRELATIO_DEF = "overwriteClassrelatioDef",
    UP_DAMAGE_INDIVIDUALITY = "upDamageIndividuality",
    DOWN_DAMAGE_INDIVIDUALITY = "downDamageIndividuality",
    UP_DAMAGE_INDIVIDUALITY_ACTIVEONLY = "upDamageIndividualityActiveonly",
    DOWN_DAMAGE_INDIVIDUALITY_ACTIVEONLY = "downDamageIndividualityActiveonly",
    UP_NPTURNVAL = "upNpturnval",
    DOWN_NPTURNVAL = "downNpturnval",
    MULTIATTACK = "multiattack",
    UP_GIVE_NP = "upGiveNp",
    DOWN_GIVE_NP = "downGiveNp",
    UP_RESISTANCE_DELAY_NPTURN = "upResistanceDelayNpturn",
    DOWN_RESISTANCE_DELAY_NPTURN = "downResistanceDelayNpturn",
    PIERCE_DEFENCE = "pierceDefence",
    UP_GUTS_HP = "upGutsHp",
    DOWN_GUTS_HP = "downGutsHp",
    UP_FUNCGAIN_NP = "upFuncgainNp",
    DOWN_FUNCGAIN_NP = "downFuncgainNp",
    UP_FUNC_HP_REDUCE = "upFuncHpReduce",
    DOWN_FUNC_HP_REDUCE = "downFuncHpReduce",
    UP_DEFENCECOMMAN_DAMAGE = "upDefencecommanDamage",
    DOWN_DEFENCECOMMAN_DAMAGE = "downDefencecommanDamage",
    NPATTACK_PREV_BUFF = "npattackPrevBuff",
    FIX_COMMANDCARD = "fixCommandcard",
    DONOT_GAINNP = "donotGainnp",
    FIELD_INDIVIDUALITY = "fieldIndividuality",
    DONOT_ACT_COMMANDTYPE = "donotActCommandtype",
    UP_DAMAGE_EVENT_POINT = "upDamageEventPoint",
    UP_DAMAGE_SPECIAL = "upDamageSpecial",
    ATTACK_FUNCTION = "attackFunction",
    COMMANDCODEATTACK_FUNCTION = "commandcodeattackFunction",
    DONOT_NOBLE_COND_MISMATCH = "donotNobleCondMismatch",
    DONOT_SELECT_COMMANDCARD = "donotSelectCommandcard",
    DONOT_REPLACE = "donotReplace",
    SHORTEN_USER_EQUIP_SKILL = "shortenUserEquipSkill",
    TD_TYPE_CHANGE = "tdTypeChange",
    OVERWRITE_CLASS_RELATION = "overwriteClassRelation",
    TD_TYPE_CHANGE_ARTS = "tdTypeChangeArts",
    TD_TYPE_CHANGE_BUSTER = "tdTypeChangeBuster",
    TD_TYPE_CHANGE_QUICK = "tdTypeChangeQuick",
    COMMANDATTACK_BEFORE_FUNCTION = "commandattackBeforeFunction",
    GUTS_FUNCTION = "gutsFunction",
    UP_CRITICAL_RATE_DAMAGE_TAKEN = "upCriticalRateDamageTaken",
    DOWN_CRITICAL_RATE_DAMAGE_TAKEN = "downCriticalRateDamageTaken",
    UP_CRITICAL_STAR_DAMAGE_TAKEN = "upCriticalStarDamageTaken",
    DOWN_CRITICAL_STAR_DAMAGE_TAKEN = "downCriticalStarDamageTaken",
    SKILL_RANK_UP = "skillRankUp",
    AVOIDANCE_INDIVIDUALITY = "avoidanceIndividuality",
    CHANGE_COMMAND_CARD_TYPE = "changeCommandCardType",
    SPECIAL_INVINCIBLE = "specialInvincible",
    PREVENT_DEATH_BY_DAMAGE = "preventDeathByDamage",
    COMMANDCODEATTACK_AFTER_FUNCTION = "commandcodeattackAfterFunction",
    ATTACK_BEFORE_FUNCTION = "attackBeforeFunction",
    DONOT_SKILL_SELECT = "donotSkillSelect",
    BUFF_RATE = "buffRate",
    INVISIBLE_BATTLE_CHARA = "invisibleBattleChara",
    COUNTER_FUNCTION = "counterFunction",
    NOT_TARGET_SKILL = "notTargetSkill",
    HP_REDUCE_TO_REGAIN = "hpReduceToRegain",
    SELFTURNSTART_FUNCTION = "selfturnstartFunction",
    OVERWRITE_DEAD_TYPE = "overwriteDeadType",
    UP_ACTION_COUNT = "upActionCount",
    DOWN_ACTION_COUNT = "downActionCount",
    SHIFT_GUTS = "shiftGuts",
    SHIFT_GUTS_RATIO = "shiftGutsRatio",
    MASTER_SKILL_VALUE_UP = "masterSkillValueUp",
    BUFF_CONVERT = "buffConvert",
    SUB_FIELD_INDIVIDUALITY = "subFieldIndividuality",
    COMMANDCODEATTACK_BEFORE_FUNCTION_MAIN_ONLY = "commandcodeattackBeforeFunctionMainOnly",
    COMMANDCODEATTACK_AFTER_FUNCTION_MAIN_ONLY = "commandcodeattackAfterFunctionMainOnly",
    COMMANDATTACK_BEFORE_FUNCTION_MAIN_ONLY = "commandattackBeforeFunctionMainOnly",
    COMMANDATTACK_AFTER_FUNCTION_MAIN_ONLY = "commandattackAfterFunctionMainOnly",
    ATTACK_BEFORE_FUNCTION_MAIN_ONLY = "attackBeforeFunctionMainOnly",
    ATTACK_AFTER_FUNCTION_MAIN_ONLY = "attackAfterFunctionMainOnly",
    WAR_BOARD_NOT_ATTACKED = "warBoardNotAttacked",
    WAR_BOARD_IGNORE_DEFEATPOINT = "warBoardIgnoreDefeatpoint",
    SKILL_AFTER_FUNCTION = "skillAfterFunction",
    TREASURE_DEVICE_AFTER_FUNCTION = "treasureDeviceAfterFunction",
    SKILL_AFTER_FUNCTION_MAIN_ONLY = "skillAfterFunctionMainOnly",
    TREASURE_DEVICE_AFTER_FUNCTION_MAIN_ONLY = "treasureDeviceAfterFunctionMainOnly",
    PREVENT_INVISIBLE_WHEN_INSTANT_DEATH = "preventInvisibleWhenInstantDeath",
    TO_FIELD_CHANGE_FIELD = "toFieldChangeField",
    TO_FIELD_AVOID_BUFF = "toFieldAvoidBuff",
    TO_FIELD_SUB_INDIVIDUALITY_FIELD = "toFieldSubIndividualityField",
}

export enum NiceBuffAction {
    NONE = "none",
    COMMAND_ATK = "commandAtk",
    COMMAND_DEF = "commandDef",
    ATK = "atk",
    DEFENCE = "defence",
    DEFENCE_PIERCE = "defencePierce",
    SPECIALDEFENCE = "specialdefence",
    DAMAGE = "damage",
    DAMAGE_INDIVIDUALITY = "damageIndividuality",
    DAMAGE_INDIVIDUALITY_ACTIVEONLY = "damageIndividualityActiveonly",
    SELFDAMAGE = "selfdamage",
    CRITICAL_DAMAGE = "criticalDamage",
    NPDAMAGE = "npdamage",
    GIVEN_DAMAGE = "givenDamage",
    RECEIVE_DAMAGE = "receiveDamage",
    PIERCE_INVINCIBLE = "pierceInvincible",
    INVINCIBLE = "invincible",
    BREAK_AVOIDANCE = "breakAvoidance",
    AVOIDANCE = "avoidance",
    OVERWRITE_BATTLECLASS = "overwriteBattleclass",
    OVERWRITE_CLASSRELATIO_ATK = "overwriteClassrelatioAtk",
    OVERWRITE_CLASSRELATIO_DEF = "overwriteClassrelatioDef",
    COMMAND_NP_ATK = "commandNpAtk",
    COMMAND_NP_DEF = "commandNpDef",
    DROP_NP = "dropNp",
    DROP_NP_DAMAGE = "dropNpDamage",
    COMMAND_STAR_ATK = "commandStarAtk",
    COMMAND_STAR_DEF = "commandStarDef",
    CRITICAL_POINT = "criticalPoint",
    STARWEIGHT = "starweight",
    TURNEND_NP = "turnendNp",
    TURNEND_STAR = "turnendStar",
    TURNEND_HP_REGAIN = "turnendHpRegain",
    TURNEND_HP_REDUCE = "turnendHpReduce",
    GAIN_HP = "gainHp",
    TURNVAL_NP = "turnvalNp",
    GRANT_STATE = "grantState",
    RESISTANCE_STATE = "resistanceState",
    AVOID_STATE = "avoidState",
    DONOT_ACT = "donotAct",
    DONOT_SKILL = "donotSkill",
    DONOT_NOBLE = "donotNoble",
    DONOT_RECOVERY = "donotRecovery",
    INDIVIDUALITY_ADD = "individualityAdd",
    INDIVIDUALITY_SUB = "individualitySub",
    HATE = "hate",
    CRITICAL_RATE = "criticalRate",
    AVOID_INSTANTDEATH = "avoidInstantdeath",
    RESIST_INSTANTDEATH = "resistInstantdeath",
    NONRESIST_INSTANTDEATH = "nonresistInstantdeath",
    REGAIN_NP_USED_NOBLE = "regainNpUsedNoble",
    FUNCTION_DEAD = "functionDead",
    MAXHP_RATE = "maxhpRate",
    MAXHP_VALUE = "maxhpValue",
    FUNCTION_WAVESTART = "functionWavestart",
    FUNCTION_SELFTURNEND = "functionSelfturnend",
    GIVE_GAIN_HP = "giveGainHp",
    FUNCTION_COMMANDATTACK = "functionCommandattack",
    FUNCTION_DEADATTACK = "functionDeadattack",
    FUNCTION_ENTRY = "functionEntry",
    CHAGETD = "chagetd",
    GRANT_SUBSTATE = "grantSubstate",
    TOLERANCE_SUBSTATE = "toleranceSubstate",
    GRANT_INSTANTDEATH = "grantInstantdeath",
    FUNCTION_DAMAGE = "functionDamage",
    FUNCTION_REFLECTION = "functionReflection",
    MULTIATTACK = "multiattack",
    GIVE_NP = "giveNp",
    RESISTANCE_DELAY_NPTURN = "resistanceDelayNpturn",
    PIERCE_DEFENCE = "pierceDefence",
    GUTS_HP = "gutsHp",
    FUNCGAIN_NP = "funcgainNp",
    FUNC_HP_REDUCE = "funcHpReduce",
    FUNCTION_NPATTACK = "functionNpattack",
    FIX_COMMANDCARD = "fixCommandcard",
    DONOT_GAINNP = "donotGainnp",
    FIELD_INDIVIDUALITY = "fieldIndividuality",
    DONOT_ACT_COMMANDTYPE = "donotActCommandtype",
    DAMAGE_EVENT_POINT = "damageEventPoint",
    DAMAGE_SPECIAL = "damageSpecial",
    FUNCTION_ATTACK = "functionAttack",
    FUNCTION_COMMANDCODEATTACK = "functionCommandcodeattack",
    DONOT_NOBLE_COND_MISMATCH = "donotNobleCondMismatch",
    DONOT_SELECT_COMMANDCARD = "donotSelectCommandcard",
    DONOT_REPLACE = "donotReplace",
    SHORTEN_USER_EQUIP_SKILL = "shortenUserEquipSkill",
    TD_TYPE_CHANGE = "tdTypeChange",
    OVERWRITE_CLASS_RELATION = "overwriteClassRelation",
    FUNCTION_COMMANDATTACK_BEFORE = "functionCommandattackBefore",
    FUNCTION_GUTS = "functionGuts",
    CRITICAL_RATE_DAMAGE_TAKEN = "criticalRateDamageTaken",
    CRITICAL_STAR_DAMAGE_TAKEN = "criticalStarDamageTaken",
    SKILL_RANK_CHANGE = "skillRankChange",
    AVOIDANCE_INDIVIDUALITY = "avoidanceIndividuality",
    CHANGE_COMMAND_CARD_TYPE = "changeCommandCardType",
    SPECIAL_INVINCIBLE = "specialInvincible",
    PREVENT_DEATH_BY_DAMAGE = "preventDeathByDamage",
    FUNCTION_COMMANDCODEATTACK_AFTER = "functionCommandcodeattackAfter",
    FUNCTION_ATTACK_BEFORE = "functionAttackBefore",
    DONOT_SKILL_SELECT = "donotSkillSelect",
    INVISIBLE_BATTLE_CHARA = "invisibleBattleChara",
    BUFF_RATE = "buffRate",
    COUNTER_FUNCTION = "counterFunction",
    NOT_TARGET_SKILL = "notTargetSkill",
    TO_FIELD_CHANGE_FIELD = "toFieldChangeField",
    TO_FIELD_AVOID_BUFF = "toFieldAvoidBuff",
    GRANT_STATE_UP_ONLY = "grantStateUpOnly",
    TURNEND_HP_REDUCE_TO_REGAIN = "turnendHpReduceToRegain",
    FUNCTION_SELFTURNSTART = "functionSelfturnstart",
    OVERWRITE_DEAD_TYPE = "overwriteDeadType",
    ACTION_COUNT = "actionCount",
    SHIFT_GUTS = "shiftGuts",
    TO_FIELD_SUB_INDIVIDUALITY_FIELD = "toFieldSubIndividualityField",
    MASTER_SKILL_VALUE_UP = "masterSkillValueUp",
    BUFF_CONVERT = "buffConvert",
    SUB_FIELD_INDIVIDUALITY = "subFieldIndividuality",
    FUNCTION_COMMANDCODEATTACK_BEFORE_MAIN_ONLY = "functionCommandcodeattackBeforeMainOnly",
    FUNCTION_COMMANDCODEATTACK_AFTER_MAIN_ONLY = "functionCommandcodeattackAfterMainOnly",
    FUNCTION_COMMANDATTACK_BEFORE_MAIN_ONLY = "functionCommandattackBeforeMainOnly",
    FUNCTION_COMMANDATTACK_AFTER_MAIN_ONLY = "functionCommandattackAfterMainOnly",
    FUNCTION_ATTACK_BEFORE_MAIN_ONLY = "functionAttackBeforeMainOnly",
    FUNCTION_ATTACK_AFTER_MAIN_ONLY = "functionAttackAfterMainOnly",
    FUNCTION_SKILL_AFTER = "functionSkillAfter",
    FUNCTION_SKILL_AFTER_MAIN_ONLY = "functionSkillAfterMainOnly",
    FUNCTION_TREASURE_DEVICE_AFTER = "functionTreasureDeviceAfter",
    FUNCTION_TREASURE_DEVICE_AFTER_MAIN_ONLY = "functionTreasureDeviceAfterMainOnly",
    GUTS = "guts",
    PREVENT_INVISIBLE_WHEN_INSTANT_DEATH = "preventInvisibleWhenInstantDeath",
}

export enum NiceBuffLimit {
    NONE = "none",
    UPPER = "upper",
    LOWER = "lower",
    NORMAL = "normal",
}

export enum NiceDataValsType {
    Rate = "rate",
    Turn = "turn",
    Count = "count",
    Value = "value",
    Value2 = "value2",
    UseRate = "userate",
    Target = "target",
    Correction = "correction",
    ParamAdd = "paramadd",
    ParamMax = "parammax",
    HideMiss = "hidemiss",
    OnField = "onfield",
    HideNoEffect = "hidenoeffect",
    Unaffected = "unaffected",
    ShowState = "showstate",
    AuraEffectId = "auraeffectid",
    ActSet = "actset",
    ActSetWeight = "actsetweight",
    ShowQuestNoEffect = "showquestnoeffect",
    CheckDead = "checkdead",
    RatioHPHigh = "ratiohphigh",
    RatioHPLow = "ratiohplow",
    SetPassiveFrame = "setpassiveframe",
    ProcPassive = "procpassive",
    ProcActive = "procactive",
    HideParam = "hideparam",
    SkillID = "skillid",
    SkillLV = "skilllv",
    ShowCardOnly = "showcardonly",
    EffectSummon = "effectsummon",
    RatioHPRangeHigh = "ratiohprangehigh",
    RatioHPRangeLow = "ratiohprangelow",
    TargetList = "targetlist",
    OpponentOnly = "opponentonly",
    StatusEffectId = "statuseffectid",
    EndBattle = "endbattle",
    LoseBattle = "losebattle",
    AddIndividualty = "addindividualty",
    AddLinkageTargetIndividualty = "addlinkagetargetindividualty",
    SameBuffLimitTargetIndividuality = "samebufflimittargetindividuality",
    SameBuffLimitNum = "samebufflimitnum",
    CheckDuplicate = "checkduplicate",
    OnFieldCount = "onfieldcount",
    TargetRarityList = "targetraritylist",
    DependFuncId = "dependfuncid",
    DependFuncVals = "dependfuncvals",
    InvalidHide = "invalidhide",
    OutEnemyNpcId = "outenemynpcid",
    InEnemyNpcId = "inenemynpcid",
    OutEnemyPosition = "outenemyposition",
    IgnoreIndividuality = "ignoreindividuality",
    StarHigher = "starhigher",
    ChangeTDCommandType = "changetdcommandtype",
    ShiftNpcId = "shiftnpcid",
    DisplayLastFuncInvalidType = "displaylastfuncinvalidtype",
    AndCheckIndividualityList = "andcheckindividualitylist",
    WinBattleNotRelatedSurvivalStatus = "winbattlenotrelatedsurvivalstatus",
    ForceSelfInstantDeath = "forceselfinstantdeath",
    ChangeMaxBreakGauge = "changemaxbreakgauge",
    ParamAddMaxValue = "paramaddmaxvalue",
    ParamAddMaxCount = "paramaddmaxcount",
    LossHpChangeDamage = "losshpchangedamage",
    IncludePassiveIndividuality = "includepassiveindividuality",
    MotionChange = "motionchange",
    PopLabelDelay = "poplabeldelay",
    NoTargetNoAct = "notargetnoact",
    CardIndex = "cardindex",
    CardIndividuality = "cardindividuality",
    WarBoardTakeOverBuff = "warboardtakeoverbuff",
    ParamAddSelfIndividuality = "paramaddselfindividuality",
    ParamAddOpIndividuality = "paramaddopindividuality",
    ParamAddFieldIndividuality = "paramaddfieldindividuality",
    ParamAddValue = "paramaddvalue",
    MultipleGainStar = "multiplegainstar",
    NoCheckIndividualityIfNotUnit = "nocheckindividualityifnotunit",
    ForcedEffectSpeedOne = "forcedeffectspeedone",
    SetLimitCount = "setlimitcount",
    CheckEnemyFieldSpace = "checkenemyfieldspace",
    TriggeredFuncPosition = "triggeredfuncposition",
    DamageCount = "damagecount",
    DamageRates = "damagerates",
    OnPositions = "onpositions",
    OffPositions = "offpositions",
    TargetIndiv = "targetindiv",
    IncludeIgnoreIndividuality = "includeignoreindividuality",
    EvenIfWinDie = "evenifwindie",
    CallSvtEffectId = "callsvteffectid",
    ForceAddState = "forceaddstate",
    UnSubState = "unsubstate",
    ForceSubState = "forcesubstate",
    IgnoreIndivUnreleaseable = "ignoreindivunreleaseable",
    OnParty = "onparty",
    CounterId = "counterid",
    CounterLv = "counterlv",
    CounterOc = "counteroc",
    UseTreasureDevice = "usetreasuredevice",
    SkillReaction = "skillreaction",
    BehaveAsFamilyBuff = "behaveasfamilybuff",
    UnSubStateWhileLinkedToOthers = "unsubstatewhilelinkedtoothers",
    NotAccompanyWhenLinkedTargetMoveState = "notaccompanywhenlinkedtargetmovestate",
    AllowSubBgmPlaying = "allowsubbgmplaying",
    NotTargetSkillIdArray = "nottargetskillidarray",
    ShortTurn = "shortturn",
    FieldIndividuality = "fieldindividuality",
    BGId = "bgid",
    BGType = "bgtype",
    BgmId = "bgmid",
    TakeOverFieldState = "takeoverfieldstate",
    TakeOverNextWaveBGAndBGM = "takeovernextwavebgandbgm",
    RemoveFieldBuffActorDeath = "removefieldbuffactordeath",
    FieldBuffGrantType = "fieldbuffgranttype",
    Priority = "priority",
    AddIndividualityEx = "addindividualityex",
    IgnoreResistance = "ignoreresistance",
    GainNpTargetPassiveIndividuality = "gainnptargetpassiveindividuality",
    HpReduceToRegainIndiv = "hpreducetoregainindiv",
    DisplayActualRecoveryHpFlag = "displayactualrecoveryhpflag",
    ShiftDeckIndex = "shiftdeckindex",
    PopValueText = "popvaluetext",
    IsLossHpPerNow = "islosshppernow",
    CopyTargetFunctionType = "copytargetfunctiontype",
    CopyFunctionTargetPTOnly = "copyfunctiontargetptonly",
    IgnoreValueUp = "ignorevalueup",
    ApplyValueUp = "applyvalueup",
    ActNoDamageBuff = "actnodamagebuff",
    ActSelectIndex = "actselectindex",
    CopyTargetBuffType = "copytargetbufftype",
    NotSkillCopyTargetFuncIds = "notskillcopytargetfuncids",
    NotSkillCopyTargetIndividualities = "notskillcopytargetindividualities",
    ClassIconAuraEffectId = "classiconauraeffectid",
    ActMasterGenderType = "actmastergendertype",
    IntervalTurn = "intervalturn",
    IntervalCount = "intervalcount",
    TriggeredFieldCountTarget = "triggeredfieldcounttarget",
    TriggeredFieldCountRange = "triggeredfieldcountrange",
    TargetEnemyRange = "targetenemyrange",
    TriggeredFuncPositionSameTarget = "triggeredfuncpositionsametarget",
    TriggeredFuncPositionAll = "triggeredfuncpositionall",
    TriggeredTargetHpRange = "triggeredtargethprange",
    TriggeredTargetHpRateRange = "triggeredtargethpraterange",
    ExcludeUnSubStateIndiv = "excludeunsubstateindiv",
    ProgressTurnOnBoard = "progressturnonboard",
    CheckTargetResurrectable = "checktargetresurrectable",
    CancelTransform = "canceltransform",
    UnSubStateWhenContinue = "unsubstatewhencontinue",
    CheckTargetHaveDefeatPoint = "checktargethavedefeatpoint",
    NPFixedDamageValue = "npfixeddamagevalue",
}

export enum NiceClassRelationOverwriteType {
    OVERWRITE_FORCE = "overwriteForce",
    OVERWRITE_MORE_THAN_TARGET = "overwriteMoreThanTarget",
    OVERWRITE_LESS_THAN_TARGET = "overwriteLessThanTarget",
}

export enum NiceItemType {
    QP = "qp",
    STONE = "stone",
    AP_RECOVER = "apRecover",
    AP_ADD = "apAdd",
    MANA = "mana",
    KEY = "key",
    GACHA_CLASS = "gachaClass",
    GACHA_RELIC = "gachaRelic",
    GACHA_TICKET = "gachaTicket",
    LIMIT = "limit",
    SKILL_LV_UP = "skillLvUp",
    TD_LV_UP = "tdLvUp",
    FRIEND_POINT = "friendPoint",
    EVENT_POINT = "eventPoint",
    EVENT_ITEM = "eventItem",
    QUEST_REWARD_QP = "questRewardQp",
    CHARGE_STONE = "chargeStone",
    RP_ADD = "rpAdd",
    BOOST_ITEM = "boostItem",
    STONE_FRAGMENTS = "stoneFragments",
    ANONYMOUS = "anonymous",
    RARE_PRI = "rarePri",
    COSTUME_RELEASE = "costumeRelease",
    ITEM_SELECT = "itemSelect",
    COMMAND_CARD_PRM_UP = "commandCardPrmUp",
    DICE = "dice",
    CONTINUE_ITEM = "continueItem",
    EUQIP_SKILL_USE_ITEM = "euqipSkillUseItem",
    SVT_COIN = "svtCoin",
    FRIENDSHIP_UP_ITEM = "friendshipUpItem",
    PP = "pp",
    TRADE_AP = "tradeAp",
    RI = "ri",
    STORMPOD = "stormpod",
}

export enum NiceGiftType {
    SERVANT = "servant",
    ITEM = "item",
    FRIENDSHIP = "friendship",
    USER_EXP = "userExp",
    EQUIP = "equip",
    EVENT_SVT_JOIN = "eventSvtJoin",
    EVENT_SVT_GET = "eventSvtGet",
    QUEST_REWARD_ICON = "questRewardIcon",
    COSTUME_RELEASE = "costumeRelease",
    COSTUME_GET = "costumeGet",
    COMMAND_CODE = "commandCode",
    EVENT_POINT_BUFF = "eventPointBuff",
    EVENT_BOARD_GAME_TOKEN = "eventBoardGameToken",
    EVENT_COMMAND_ASSIST = "eventCommandAssist",
    EVENT_HEEL_PORTRAIT = "eventHeelPortrait",
}

export enum NiceShopType {
    NONE = "none",
    EVENT_ITEM = "eventItem",
    MANA = "mana",
    RARE_PRI = "rarePri",
    SVT_STORAGE = "svtStorage",
    SVT_EQUIP_STORAGE = "svtEquipStorage",
    STONE_FRAGMENTS = "stoneFragments",
    SVT_ANONYMOUS = "svtAnonymous",
    BGM = "bgm",
    LIMIT_MATERIAL = "limitMaterial",
    GRAIL_FRAGMENTS = "grailFragments",
    SVT_COSTUME = "svtCostume",
    START_UP_SUMMON = "startUpSummon",
    SHOP13 = "shop13",
    TRADE_AP = "tradeAp",
    SHOP15 = "shop15",
    EVENT_SVT_EQUIP = "eventSvtEquip",
}

export enum NicePayType {
    STONE = "stone",
    QP = "qp",
    FRIEND_POINT = "friendPoint",
    MANA = "mana",
    TICKET = "ticket",
    EVENT_ITEM = "eventItem",
    CHARGE_STONE = "chargeStone",
    STONE_FRAGMENTS = "stoneFragments",
    ANONYMOUS = "anonymous",
    RARE_PRI = "rarePri",
    ITEM = "item",
    GRAIL_FRAGMENTS = "grailFragments",
    FREE = "free",
    COMMON_CONSUME = "commonConsume",
}

export enum NicePurchaseType {
    NONE = "none",
    ITEM = "item",
    EQUIP = "equip",
    FRIEND_GACHA = "friendGacha",
    SERVANT = "servant",
    SET_ITEM = "setItem",
    QUEST = "quest",
    EVENT_SHOP = "eventShop",
    EVENT_SVT_GET = "eventSvtGet",
    MANA_SHOP = "manaShop",
    STORAGE_SVT = "storageSvt",
    STORAGE_SVTEQUIP = "storageSvtequip",
    BGM = "bgm",
    COSTUME_RELEASE = "costumeRelease",
    BGM_RELEASE = "bgmRelease",
    LOTTERY_SHOP = "lotteryShop",
    EVENT_FACTORY = "eventFactory",
    ITEM_AS_PRESENT = "itemAsPresent",
    COMMAND_CODE = "commandCode",
    GIFT = "gift",
    EVENT_SVT_JOIN = "eventSvtJoin",
    ASSIST = "assist",
    KIARA_PUNISHER_RESET = "kiaraPunisherReset",
}

export enum NiceCardType {
    NONE = "none",
    ARTS = "arts",
    BUSTER = "buster",
    QUICK = "quick",
    ADDATTACK = "extra",
    BLANK = "blank",
    WEAK = "weak",
    STRENGTH = "strength",
}

export enum NiceCondType {
    NONE = "none",
    QUEST_CLEAR = "questClear",
    ITEM_GET = "itemGet",
    USE_ITEM_ETERNITY = "useItemEternity",
    USE_ITEM_TIME = "useItemTime",
    USE_ITEM_COUNT = "useItemCount",
    SVT_LEVEL = "svtLevel",
    SVT_LIMIT = "svtLimit",
    SVT_GET = "svtGet",
    SVT_FRIENDSHIP = "svtFriendship",
    SVT_GROUP = "svtGroup",
    EVENT = "event",
    DATE = "date",
    WEEKDAY = "weekday",
    PURCHASE_QP_SHOP = "purchaseQpShop",
    PURCHASE_STONE_SHOP = "purchaseStoneShop",
    WAR_CLEAR = "warClear",
    FLAG = "flag",
    SVT_COUNT_STOP = "svtCountStop",
    BIRTH_DAY = "birthDay",
    EVENT_END = "eventEnd",
    SVT_EVENT_JOIN = "svtEventJoin",
    MISSION_CONDITION_DETAIL = "missionConditionDetail",
    EVENT_MISSION_CLEAR = "eventMissionClear",
    EVENT_MISSION_ACHIEVE = "eventMissionAchieve",
    QUEST_CLEAR_NUM = "questClearNum",
    NOT_QUEST_GROUP_CLEAR = "notQuestGroupClear",
    RAID_ALIVE = "raidAlive",
    RAID_DEAD = "raidDead",
    RAID_DAMAGE = "raidDamage",
    QUEST_CHALLENGE_NUM = "questChallengeNum",
    MASTER_MISSION = "masterMission",
    QUEST_GROUP_CLEAR = "questGroupClear",
    SUPER_BOSS_DAMAGE = "superBossDamage",
    SUPER_BOSS_DAMAGE_ALL = "superBossDamageAll",
    PURCHASE_SHOP = "purchaseShop",
    QUEST_NOT_CLEAR = "questNotClear",
    NOT_SHOP_PURCHASE = "notShopPurchase",
    NOT_SVT_GET = "notSvtGet",
    NOT_EVENT_SHOP_PURCHASE = "notEventShopPurchase",
    SVT_HAVING = "svtHaving",
    NOT_SVT_HAVING = "notSvtHaving",
    QUEST_CHALLENGE_NUM_EQUAL = "questChallengeNumEqual",
    QUEST_CHALLENGE_NUM_BELOW = "questChallengeNumBelow",
    QUEST_CLEAR_NUM_EQUAL = "questClearNumEqual",
    QUEST_CLEAR_NUM_BELOW = "questClearNumBelow",
    QUEST_CLEAR_PHASE = "questClearPhase",
    NOT_QUEST_CLEAR_PHASE = "notQuestClearPhase",
    EVENT_POINT_GROUP_WIN = "eventPointGroupWin",
    EVENT_NORMA_POINT_CLEAR = "eventNormaPointClear",
    QUEST_AVAILABLE = "questAvailable",
    QUEST_GROUP_AVAILABLE_NUM = "questGroupAvailableNum",
    EVENT_NORMA_POINT_NOT_CLEAR = "eventNormaPointNotClear",
    NOT_ITEM_GET = "notItemGet",
    COSTUME_GET = "costumeGet",
    QUEST_RESET_AVAILABLE = "questResetAvailable",
    SVT_GET_BEFORE_EVENT_END = "svtGetBeforeEventEnd",
    QUEST_CLEAR_RAW = "questClearRaw",
    QUEST_GROUP_CLEAR_RAW = "questGroupClearRaw",
    EVENT_GROUP_POINT_RATIO_IN_TERM = "eventGroupPointRatioInTerm",
    EVENT_GROUP_RANK_IN_TERM = "eventGroupRankInTerm",
    NOT_EVENT_RACE_QUEST_OR_NOT_ALL_GROUP_GOAL = "notEventRaceQuestOrNotAllGroupGoal",
    EVENT_GROUP_TOTAL_WIN_EACH_PLAYER = "eventGroupTotalWinEachPlayer",
    EVENT_SCRIPT_PLAY = "eventScriptPlay",
    SVT_COSTUME_RELEASED = "svtCostumeReleased",
    QUEST_NOT_CLEAR_AND = "questNotClearAnd",
    SVT_RECOVERD = "svtRecoverd",
    SHOP_RELEASED = "shopReleased",
    EVENT_POINT = "eventPoint",
    EVENT_REWARD_DISP_COUNT = "eventRewardDispCount",
    EQUIP_WITH_TARGET_COSTUME = "equipWithTargetCostume",
    RAID_GROUP_DEAD = "raidGroupDead",
    NOT_SVT_GROUP = "notSvtGroup",
    NOT_QUEST_RESET_AVAILABLE = "notQuestResetAvailable",
    NOT_QUEST_CLEAR_RAW = "notQuestClearRaw",
    NOT_QUEST_GROUP_CLEAR_RAW = "notQuestGroupClearRaw",
    NOT_EVENT_MISSION_CLEAR = "notEventMissionClear",
    NOT_EVENT_MISSION_ACHIEVE = "notEventMissionAchieve",
    NOT_COSTUME_GET = "notCostumeGet",
    NOT_SVT_COSTUME_RELEASED = "notSvtCostumeReleased",
    NOT_EVENT_RACE_QUEST_OR_NOT_TARGET_RANK_GOAL = "notEventRaceQuestOrNotTargetRankGoal",
    PLAYER_GENDER_TYPE = "playerGenderType",
    SHOP_GROUP_LIMIT_NUM = "shopGroupLimitNum",
    EVENT_GROUP_POINT = "eventGroupPoint",
    EVENT_GROUP_POINT_BELOW = "eventGroupPointBelow",
    EVENT_TOTAL_POINT = "eventTotalPoint",
    EVENT_TOTAL_POINT_BELOW = "eventTotalPointBelow",
    EVENT_VALUE = "eventValue",
    EVENT_VALUE_BELOW = "eventValueBelow",
    EVENT_FLAG = "eventFlag",
    EVENT_STATUS = "eventStatus",
    NOT_EVENT_STATUS = "notEventStatus",
    FORCE_FALSE = "forceFalse",
    SVT_HAVING_LIMIT_MAX = "svtHavingLimitMax",
    EVENT_POINT_BELOW = "eventPointBelow",
    SVT_EQUIP_FRIENDSHIP_HAVING = "svtEquipFriendshipHaving",
    MOVIE_NOT_DOWNLOAD = "movieNotDownload",
    MULTIPLE_DATE = "multipleDate",
    SVT_FRIENDSHIP_ABOVE = "svtFriendshipAbove",
    SVT_FRIENDSHIP_BELOW = "svtFriendshipBelow",
    MOVIE_DOWNLOADED = "movieDownloaded",
    ROUTE_SELECT = "routeSelect",
    NOT_ROUTE_SELECT = "notRouteSelect",
    LIMIT_COUNT = "limitCount",
    LIMIT_COUNT_ABOVE = "limitCountAbove",
    LIMIT_COUNT_BELOW = "limitCountBelow",
    BAD_END_PLAY = "badEndPlay",
    COMMAND_CODE_GET = "commandCodeGet",
    NOT_COMMAND_CODE_GET = "notCommandCodeGet",
    ALL_USERS_BOX_GACHA_COUNT = "allUsersBoxGachaCount",
    TOTAL_TD_LEVEL = "totalTdLevel",
    TOTAL_TD_LEVEL_ABOVE = "totalTdLevelAbove",
    TOTAL_TD_LEVEL_BELOW = "totalTdLevelBelow",
    COMMON_RELEASE = "commonRelease",
    BATTLE_RESULT_WIN = "battleResultWin",
    BATTLE_RESULT_LOSE = "battleResultLose",
    EVENT_VALUE_EQUAL = "eventValueEqual",
    BOARD_GAME_TOKEN_HAVING = "boardGameTokenHaving",
    BOARD_GAME_TOKEN_GROUP_HAVING = "boardGameTokenGroupHaving",
    EVENT_FLAG_ON = "eventFlagOn",
    EVENT_FLAG_OFF = "eventFlagOff",
    QUEST_STATUS_FLAG_ON = "questStatusFlagOn",
    QUEST_STATUS_FLAG_OFF = "questStatusFlagOff",
    EVENT_VALUE_NOT_EQUAL = "eventValueNotEqual",
    LIMIT_COUNT_MAX_EQUAL = "limitCountMaxEqual",
    LIMIT_COUNT_MAX_ABOVE = "limitCountMaxAbove",
    LIMIT_COUNT_MAX_BELOW = "limitCountMaxBelow",
    BOARD_GAME_TOKEN_GET_NUM = "boardGameTokenGetNum",
    BATTLE_LINE_WIN_ABOVE = "battleLineWinAbove",
    BATTLE_LINE_LOSE_ABOVE = "battleLineLoseAbove",
    BATTLE_LINE_CONTINUE_WIN = "battleLineContinueWin",
    BATTLE_LINE_CONTINUE_LOSE = "battleLineContinueLose",
    BATTLE_LINE_CONTINUE_WIN_BELOW = "battleLineContinueWinBelow",
    BATTLE_LINE_CONTINUE_LOSE_BELOW = "battleLineContinueLoseBelow",
    BATTLE_GROUP_WIN_AVOVE = "battleGroupWinAvove",
    BATTLE_GROUP_LOSE_AVOVE = "battleGroupLoseAvove",
    SVT_LIMIT_CLASS_NUM = "svtLimitClassNum",
    OVER_TIME_LIMIT_RAID_ALIVE = "overTimeLimitRaidAlive",
    ON_TIME_LIMIT_RAID_DEAD = "onTimeLimitRaidDead",
    ON_TIME_LIMIT_RAID_DEAD_NUM = "onTimeLimitRaidDeadNum",
    RAID_BATTLE_PROGRESS_ABOVE = "raidBattleProgressAbove",
    SVT_EQUIP_RARITY_LEVEL_NUM = "svtEquipRarityLevelNum",
    LATEST_MAIN_SCENARIO_WAR_CLEAR = "latestMainScenarioWarClear",
    EVENT_MAP_VALUE_CONTAINS = "eventMapValueContains",
    RESET_BIRTH_DAY = "resetBirthDay",
    SHOP_FLAG_ON = "shopFlagOn",
    SHOP_FLAG_OFF = "shopFlagOff",
    PURCHASE_VALID_SHOP_GROUP = "purchaseValidShopGroup",
    SVT_LEVEL_CLASS_NUM = "svtLevelClassNum",
    SVT_LEVEL_ID_NUM = "svtLevelIdNum",
    LIMIT_COUNT_IMAGE_EQUAL = "limitCountImageEqual",
    LIMIT_COUNT_IMAGE_ABOVE = "limitCountImageAbove",
    LIMIT_COUNT_IMAGE_BELOW = "limitCountImageBelow",
    EVENT_TYPE_START_TIME_TO_END_DATE = "eventTypeStartTimeToEndDate",
    EXIST_BOX_GACHA_SCRIPT_REPLACE_GIFT_ID = "existBoxGachaScriptReplaceGiftId",
    NOT_EXIST_BOX_GACHA_SCRIPT_REPLACE_GIFT_ID = "notExistBoxGachaScriptReplaceGiftId",
    LIMITED_PERIOD_VOICE_CHANGE_TYPE_ON = "limitedPeriodVoiceChangeTypeOn",
    START_RANDOM_MISSION = "startRandomMission",
    RANDOM_MISSION_CLEAR_NUM = "randomMissionClearNum",
    PROGRESS_VALUE_EQUAL = "progressValueEqual",
    PROGRESS_VALUE_ABOVE = "progressValueAbove",
    PROGRESS_VALUE_BELOW = "progressValueBelow",
    RANDOM_MISSION_TOTAL_CLEAR_NUM = "randomMissionTotalClearNum",
    WEEKDAYS = "weekdays",
    EVENT_FORTIFICATION_REWARD_NUM = "eventFortificationRewardNum",
    QUEST_CLEAR_BEFORE_EVENT_START = "questClearBeforeEventStart",
    NOT_QUEST_CLEAR_BEFORE_EVENT_START = "notQuestClearBeforeEventStart",
    EVENT_TUTORIAL_FLAG_ON = "eventTutorialFlagOn",
    EVENT_TUTORIAL_FLAG_OFF = "eventTutorialFlagOff",
    EVENT_SUPER_BOSS_VALUE_EQUAL = "eventSuperBossValueEqual",
    NOT_EVENT_SUPER_BOSS_VALUE_EQUAL = "notEventSuperBossValueEqual",
    ALL_SVT_TARGET_SKILL_LV_NUM = "allSvtTargetSkillLvNum",
    SUPER_BOSS_DAMAGE_ABOVE = "superBossDamageAbove",
    SUPER_BOSS_DAMAGE_BELOW = "superBossDamageBelow",
    EVENT_MISSION_GROUP_ACHIEVE = "eventMissionGroupAchieve",
    SVT_FRIENDSHIP_CLASS_NUM_ABOVE = "svtFriendshipClassNumAbove",
    NOT_WAR_CLEAR = "notWarClear",
    SVT_SKILL_LV_CLASS_NUM_ABOVE = "svtSkillLvClassNumAbove",
    SVT_CLASS_LV_UP_COUNT = "svtClassLvUpCount",
    SVT_CLASS_SKILL_LV_UP_COUNT = "svtClassSkillLvUpCount",
    SVT_CLASS_LIMIT_UP_COUNT = "svtClassLimitUpCount",
    SVT_CLASS_FRIENDSHIP_COUNT = "svtClassFriendshipCount",
    COMPLETE_HEEL_PORTRAIT = "completeHeelPortrait",
    NOT_COMPLETE_HEEL_PORTRAIT = "notCompleteHeelPortrait",
    CLASS_BOARD_SQUARE_RELEASED = "classBoardSquareReleased",
    SVT_LEVEL_EXCHANGE_SVT = "svtLevelExchangeSvt",
    SVT_LIMIT_EXCHANGE_SVT = "svtLimitExchangeSvt",
    SKILL_LV_EXCHANGE_SVT = "skillLvExchangeSvt",
    SVT_FRIENDSHIP_EXCHANGE_SVT = "svtFriendshipExchangeSvt",
    EXCHANGE_SVT = "exchangeSvt",
    RAID_DAMAGE_ABOVE = "raidDamageAbove",
    RAID_DAMAGE_BELOW = "raidDamageBelow",
    RAID_GROUP_DAMAGE_ABOVE = "raidGroupDamageAbove",
    RAID_GROUP_DAMAGE_BELOW = "raidGroupDamageBelow",
    RAID_DAMAGE_RATE_ABOVE = "raidDamageRateAbove",
    RAID_DAMAGE_RATE_BELOW = "raidDamageRateBelow",
    RAID_DAMAGE_RATE_NOT_ABOVE = "raidDamageRateNotAbove",
    RAID_DAMAGE_RATE_NOT_BELOW = "raidDamageRateNotBelow",
    RAID_GROUP_DAMAGE_RATE_ABOVE = "raidGroupDamageRateAbove",
    RAID_GROUP_DAMAGE_RATE_BELOW = "raidGroupDamageRateBelow",
    RAID_GROUP_DAMAGE_RATE_NOT_ABOVE = "raidGroupDamageRateNotAbove",
    RAID_GROUP_DAMAGE_RATE_NOT_BELOW = "raidGroupDamageRateNotBelow",
    NOT_QUEST_GROUP_CLEAR_NUM = "notQuestGroupClearNum",
    RAID_GROUP_OPEN_ABOVE = "raidGroupOpenAbove",
    RAID_GROUP_OPEN_BELOW = "raidGroupOpenBelow",
    TREASURE_DEVICE_ACCELERATE = "treasureDeviceAccelerate",
    PLAY_QUEST_PHASE = "playQuestPhase",
    NOT_PLAY_QUEST_PHASE = "notPlayQuestPhase",
    EVENT_START_TO_END = "eventStartToEnd",
}

export enum NiceVoiceCondType {
    BIRTH_DAY = "birthDay",
    EVENT = "event",
    FRIENDSHIP = "friendship",
    SVT_GET = "svtGet",
    SVT_GROUP = "svtGroup",
    QUEST_CLEAR = "questClear",
    NOT_QUEST_CLEAR = "notQuestClear",
    LEVEL_UP = "levelUp",
    LIMIT_COUNT = "limitCount",
    LIMIT_COUNT_COMMON = "limitCountCommon",
    COUNT_STOP = "countStop",
    ISNEW_WAR = "isnewWar",
    EVENT_END = "eventEnd",
    EVENT_NOEND = "eventNoend",
    EVENT_MISSION_ACTION = "eventMissionAction",
    MASTER_MISSION = "masterMission",
    LIMIT_COUNT_ABOVE = "limitCountAbove",
    EVENT_SHOP_PURCHASE = "eventShopPurchase",
    EVENT_PERIOD = "eventPeriod",
    FRIENDSHIP_ABOVE = "friendshipAbove",
    SPACIFIC_SHOP_PURCHASE = "spacificShopPurchase",
    FRIENDSHIP_BELOW = "friendshipBelow",
    COSTUME = "costume",
    LEVEL_UP_LIMIT_COUNT = "levelUpLimitCount",
    LEVEL_UP_LIMIT_COUNT_ABOVE = "levelUpLimitCountAbove",
    LEVEL_UP_LIMIT_COUNT_BELOW = "levelUpLimitCountBelow",
    UNKNOWN_27 = "unknown27",
    UNKNOWN_30 = "unknown30",
    UNKNOWN_32 = "unknown32",
    UNKNOWN_34 = "unknown34",
    UNKNOWN_35 = "unknown35",
    UNKNOWN_37 = "unknown37",
    UNKNOWN_38 = "unknown38",
    UNKNOWN_40 = "unknown40",
    UNKNOWN = "unknown",
}

export enum NiceSvtVoiceType {
    HOME = "home",
    GROETH = "groeth",
    FIRST_GET = "firstGet",
    EVENT_JOIN = "eventJoin",
    EVENT_REWARD = "eventReward",
    BATTLE = "battle",
    TREASURE_DEVICE = "treasureDevice",
    MASTER_MISSION = "masterMission",
    EVENT_SHOP = "eventShop",
    HOME_COSTUME = "homeCostume",
    BOX_GACHA_TALK = "boxGachaTalk",
    BATTLE_ENTRY = "battleEntry",
    BATTLE_WIN = "battleWin",
    EVENT_TOWER_REWARD = "eventTowerReward",
    GUIDE = "guide",
    EVENT_DAILY_POINT = "eventDailyPoint",
    TDDAMAGE = "tddamage",
    TREASURE_BOX = "treasureBox",
    WAR_BOARD = "warBoard",
    EVENT_DIGGING = "eventDigging",
    EVENT_EXPEDITION = "eventExpedition",
    EVENT_RECIPE = "eventRecipe",
    EVENT_FORTIFICATION = "eventFortification",
    SUM = "sum",
}

export enum NiceQuestType {
    MAIN = "main",
    FREE = "free",
    FRIENDSHIP = "friendship",
    EVENT = "event",
    HEROBALLAD = "heroballad",
    WAR_BOARD = "warBoard",
}

export enum NiceConsumeType {
    NONE = "none",
    AP = "ap",
    RP = "rp",
    ITEM = "item",
    AP_AND_ITEM = "apAndItem",
}

export enum NiceQuestAfterClearType {
    CLOSE = "close",
    REPEAT_FIRST = "repeatFirst",
    REPEAT_LAST = "repeatLast",
    RESET_INTERVAL = "resetInterval",
    CLOSE_DISP = "closeDisp",
}

export enum NiceQuestFlag {
    NONE = "none",
    NO_BATTLE = "noBattle",
    RAID = "raid",
    RAID_CONNECTION = "raidConnection",
    NO_CONTINUE = "noContinue",
    NO_DISPLAY_REMAIN = "noDisplayRemain",
    RAID_LAST_DAY = "raidLastDay",
    CLOSED_HIDE_COST_ITEM = "closedHideCostItem",
    CLOSED_HIDE_COST_NUM = "closedHideCostNum",
    CLOSED_HIDE_PROGRESS = "closedHideProgress",
    CLOSED_HIDE_RECOMMEND_LV = "closedHideRecommendLv",
    CLOSED_HIDE_TREND_CLASS = "closedHideTrendClass",
    CLOSED_HIDE_REWARD = "closedHideReward",
    NO_DISPLAY_CONSUME = "noDisplayConsume",
    SUPER_BOSS = "superBoss",
    NO_DISPLAY_MISSION_NOTIFY = "noDisplayMissionNotify",
    HIDE_PROGRESS = "hideProgress",
    DROP_FIRST_TIME_ONLY = "dropFirstTimeOnly",
    CHAPTER_SUB_ID_JAPANESE_NUMERALS = "chapterSubIdJapaneseNumerals",
    SUPPORT_ONLY_FORCE_BATTLE = "supportOnlyForceBattle",
    EVENT_DECK_NO_SUPPORT = "eventDeckNoSupport",
    FATIGUE_BATTLE = "fatigueBattle",
    SUPPORT_SELECT_AFTER_SCRIPT = "supportSelectAfterScript",
    BRANCH = "branch",
    USER_EVENT_DECK = "userEventDeck",
    NO_DISPLAY_RAID_REMAIN = "noDisplayRaidRemain",
    QUEST_MAX_DAMAGE_RECORD = "questMaxDamageRecord",
    ENABLE_FOLLOW_QUEST = "enableFollowQuest",
    SUPPORT_SVT_MULTIPLE_SET = "supportSvtMultipleSet",
    SUPPORT_ONLY_BATTLE = "supportOnlyBattle",
    ACT_CONSUME_BATTLE_WIN = "actConsumeBattleWin",
    VOTE = "vote",
    HIDE_MASTER = "hideMaster",
    DISABLE_MASTER_SKILL = "disableMasterSkill",
    DISABLE_COMMAND_SPEEL = "disableCommandSpeel",
    SUPPORT_SVT_EDITABLE_POSITION = "supportSvtEditablePosition",
    BRANCH_SCENARIO = "branchScenario",
    QUEST_KNOCKDOWN_RECORD = "questKnockdownRecord",
    NOT_RETRIEVABLE = "notRetrievable",
    DISPLAY_LOOPMARK = "displayLoopmark",
    BOOST_ITEM_CONSUME_BATTLE_WIN = "boostItemConsumeBattleWin",
    PLAY_SCENARIO_WITH_MAPSCREEN = "playScenarioWithMapscreen",
    BATTLE_RETREAT_QUEST_CLEAR = "battleRetreatQuestClear",
    BATTLE_RESULT_LOSE_QUEST_CLEAR = "battleResultLoseQuestClear",
    BRANCH_HAVING = "branchHaving",
    NO_DISPLAY_NEXT_ICON = "noDisplayNextIcon",
    WINDOW_ONLY = "windowOnly",
    CHANGE_MASTERS = "changeMasters",
    NOT_DISPLAY_RESULT_GET_POINT = "notDisplayResultGetPoint",
    FORCE_TO_NO_DROP = "forceToNoDrop",
    DISPLAY_CONSUME_ICON = "displayConsumeIcon",
    HARVEST = "harvest",
    RECONSTRUCTION = "reconstruction",
    ENEMY_IMMEDIATE_APPEAR = "enemyImmediateAppear",
    NO_SUPPORT_LIST = "noSupportList",
    LIVE = "live",
    FORCE_DISPLAY_ENEMY_INFO = "forceDisplayEnemyInfo",
    ALLOUT_BATTLE = "alloutBattle",
    RECOLLECTION = "recollection",
    NOT_SINGLE_SUPPORT_ONLY = "notSingleSupportOnly",
}

export enum NiceStatusRank {
    A = "A",
    A_PLUS = "A+",
    A_PLUS2 = "A++",
    A_MINUS = "A-",
    A_PLUS3 = "A+++",
    A_QUESTION = "A?",
    B = "B",
    B_PLUS = "B+",
    B_PLUS2 = "B++",
    B_MINUS = "B-",
    B_PLUS3 = "B+++",
    B_QUESTION = "B?",
    C = "C",
    C_PLUS = "C+",
    C_PLUS2 = "C++",
    C_MINUS = "C-",
    C_PLUS3 = "C+++",
    C_QUESTION = "C?",
    D = "D",
    D_PLUS = "D+",
    D_PLUS2 = "D++",
    D_MINUS = "D-",
    D_PLUS3 = "D+++",
    D_QUESTION = "D?",
    E = "E",
    E_PLUS = "E+",
    E_PLUS2 = "E++",
    E_MINUS = "E-",
    E_PLUS3 = "E+++",
    E_QUESTION = "E?",
    EX = "EX",
    QUESTION = "?",
    NONE = "None",
    UNKNOWN = "Unknown",
}

export enum NiceEventType {
    NONE = "none",
    RAID_BOSS = "raidBoss",
    PVP = "pvp",
    POINT = "point",
    LOGIN_BONUS = "loginBonus",
    COMBINE_CAMPAIGN = "combineCampaign",
    SHOP = "shop",
    QUEST_CAMPAIGN = "questCampaign",
    BANK = "bank",
    SERIAL_CAMPAIGN = "serialCampaign",
    LOGIN_CAMPAIGN = "loginCampaign",
    LOGIN_CAMPAIGN_REPEAT = "loginCampaignRepeat",
    EVENT_QUEST = "eventQuest",
    SVTEQUIP_COMBINE_CAMPAIGN = "svtequipCombineCampaign",
    TERMINAL_BANNER = "terminalBanner",
    BOX_GACHA = "boxGacha",
    BOX_GACHA_POINT = "boxGachaPoint",
    LOGIN_CAMPAIGN_STRICT = "loginCampaignStrict",
    TOTAL_LOGIN = "totalLogin",
    COMEBACK_CAMPAIGN = "comebackCampaign",
    LOCATION_CAMPAIGN = "locationCampaign",
    WAR_BOARD = "warBoard",
    COMBINE_COSUTUME_ITEM = "combineCosutumeItem",
    MYROOM_MULTIPLE_VIEW_CAMPAIGN = "myroomMultipleViewCampaign",
    INTERLUDE_CAMPAIGN = "interludeCampaign",
    MYROOM_PHOTO_CAMPAIGN = "myroomPhotoCampaign",
    FORTUNE_CAMPAIGN = "fortuneCampaign",
}

export enum NiceEventOverwriteType {
    BG_IMAGE = "bgImage",
    BGM = "bgm",
    NAME = "name",
    BANNER = "banner",
    NOTICE_BANNER = "noticeBanner",
}

export enum NiceWarFlag {
    WITH_MAP = "withMap",
    SHOW_ON_MATERIAL = "showOnMaterial",
    FOLDER_SORT_PRIOR = "folderSortPrior",
    STORY_SHORTCUT = "storyShortcut",
    IS_EVENT = "isEvent",
    CLOSE_AFTER_CLEAR = "closeAfterClear",
    MAIN_SCENARIO = "mainScenario",
    IS_WAR_ICON_LEFT = "isWarIconLeft",
    CLEARED_RETURN_TO_TITLE = "clearedReturnToTitle",
    NO_CLEAR_MARK_WITH_CLEAR = "noClearMarkWithClear",
    NO_CLEAR_MARK_WITH_COMPLETE = "noClearMarkWithComplete",
    NOT_ENTRY_BANNER_ACTIVE = "notEntryBannerActive",
    SHOP = "shop",
    BLACK_MARK_WITH_CLEAR = "blackMarkWithClear",
    DISP_FIRST_QUEST = "dispFirstQuest",
    EFFECT_DISAPPEAR_BANNER = "effectDisappearBanner",
    WHITE_MARK_WITH_CLEAR = "whiteMarkWithClear",
    WHITE_MARK_UNDER_BOARD = "whiteMarkUnderBoard",
    SUB_FOLDER = "subFolder",
    DISP_EARTH_POINT_WITHOUT_MAP = "dispEarthPointWithoutMap",
    IS_WAR_ICON_FREE = "isWarIconFree",
    IS_WAR_ICON_CENTER = "isWarIconCenter",
    NOTICE_BOARD = "noticeBoard",
}

export enum NiceWarStartType {
    NONE = "none",
    SCRIPT = "script",
    QUEST = "quest",
}

export enum NiceWarOverwriteType {
    BGM = "bgm",
    PARENT_WAR = "parentWar",
    BANNER = "banner",
    BG_IMAGE = "bgImage",
    SVT_IMAGE = "svtImage",
    FLAG = "flag",
    BASE_MAP_ID = "baseMapId",
    NAME = "name",
    LONG_NAME = "longName",
    MATERIAL_PARENT_WAR = "materialParentWar",
    COORDINATES = "coordinates",
    EFFECT_CHANGE_BLACK_MARK = "effectChangeBlackMark",
    QUEST_BOARD_SECTION_IMAGE = "questBoardSectionImage",
    WAR_FORCE_DISP = "warForceDisp",
    WAR_FORCE_HIDE = "warForceHide",
    START_TYPE = "startType",
    NOTICE_DIALOG_TEXT = "noticeDialogText",
    CLEAR_MARK = "clearMark",
    EFFECT_CHANGE_WHITE_MARK = "effectChangeWhiteMark",
    COMMAND_SPELL_ICON = "commandSpellIcon",
    MASTER_FACE_ICON = "masterFaceIcon",
}

export enum NiceAiCond {
    NONE = "none",
    HP_HIGHER = "hpHigher",
    HP_LOWER = "hpLower",
    ACTCOUNT = "actcount",
    ACTCOUNT_MULTIPLE = "actcountMultiple",
    TURN = "turn",
    TURN_MULTIPLE = "turnMultiple",
    BEFORE_ACT_ID = "beforeActId",
    BEFORE_ACT_TYPE = "beforeActType",
    BEFORE_NOT_ACT_ID = "beforeNotActId",
    BEFORE_NOT_ACT_TYPE = "beforeNotActType",
    CHECK_SELF_BUFF = "checkSelfBuff",
    CHECK_SELF_INDIVIDUALITY = "checkSelfIndividuality",
    CHECK_PT_BUFF = "checkPtBuff",
    CHECK_PT_INDIVIDUALITY = "checkPtIndividuality",
    CHECK_OPPONENT_BUFF = "checkOpponentBuff",
    CHECK_OPPONENT_INDIVIDUALITY = "checkOpponentIndividuality",
    CHECK_SELF_BUFF_INDIVIDUALITY = "checkSelfBuffIndividuality",
    CHECK_PT_BUFF_INDIVIDUALITY = "checkPtBuffIndividuality",
    CHECK_OPPONENT_BUFF_INDIVIDUALITY = "checkOpponentBuffIndividuality",
    CHECK_SELF_NPTURN = "checkSelfNpturn",
    CHECK_PT_LOWER_NPTURN = "checkPtLowerNpturn",
    CHECK_OPPONENT_HEIGHT_NPGAUGE = "checkOpponentHeightNpgauge",
    ACTCOUNT_THISTURN = "actcountThisturn",
    CHECK_PT_HP_HIGHER = "checkPtHpHigher",
    CHECK_PT_HP_LOWER = "checkPtHpLower",
    CHECK_SELF_NOT_BUFF_INDIVIDUALITY = "checkSelfNotBuffIndividuality",
    TURN_AND_ACTCOUNT_THISTURN = "turnAndActcountThisturn",
    FIELDTURN = "fieldturn",
    FIELDTURN_MULTIPLE = "fieldturnMultiple",
    CHECK_PT_LOWER_TDTURN = "checkPtLowerTdturn",
    RAID_HP_HIGHER = "raidHpHigher",
    RAID_HP_LOWER = "raidHpLower",
    RAID_COUNT_HIGHER = "raidCountHigher",
    RAID_COUNT_LOWER = "raidCountLower",
    RAID_COUNT_VALUE_HIGHER = "raidCountValueHigher",
    RAID_COUNT_VALUE_LOWER = "raidCountValueLower",
    CHECK_SPACE = "checkSpace",
    TURN_HIGHER = "turnHigher",
    TURN_LOWER = "turnLower",
    CHARACTOR_TURN_HIGHER = "charactorTurnHigher",
    CHARACTOR_TURN_LOWER = "charactorTurnLower",
    COUNT_ALIVE_PT = "countAlivePt",
    COUNT_ALIVE_OPPONENT = "countAliveOpponent",
    COUNT_PT_REST_HIGHER = "countPtRestHigher",
    COUNT_PT_REST_LOWER = "countPtRestLower",
    COUNT_OPPONENT_REST_HIGHER = "countOpponentRestHigher",
    COUNT_OPPONENT_REST_LOWER = "countOpponentRestLower",
    COUNT_ITEM_HIGHER = "countItemHigher",
    COUNT_ITEM_LOWER = "countItemLower",
    CHECK_SELF_BUFFCOUNT_INDIVIDUALITY = "checkSelfBuffcountIndividuality",
    CHECK_PT_BUFFCOUNT_INDIVIDUALITY = "checkPtBuffcountIndividuality",
    CHECK_SELF_BUFF_ACTIVE = "checkSelfBuffActive",
    CHECK_PT_BUFF_ACTIVE = "checkPtBuffActive",
    CHECK_OPPONENT_BUFF_ACTIVE = "checkOpponentBuffActive",
    COUNT_ENEMY_COMMAND_SPELL_HIGHER = "countEnemyCommandSpellHigher",
    CHECK_PT_ALL_INDIVIDUALITY = "checkPtAllIndividuality",
    CHECK_OPPONENT_ALL_INDIVIDUALITY = "checkOpponentAllIndividuality",
    STAR_HIGHER = "starHigher",
    STAR_LOWER = "starLower",
    CHECK_OPPONENT_HP_HIGHER = "checkOpponentHpHigher",
    CHECK_OPPONENT_HP_LOWER = "checkOpponentHpLower",
    CHECK_TARGET_POSITION = "checkTargetPosition",
    CHECK_SELF_BUFF_ACTIVE_AND_PASSIVE_INDIVIDUALITY = "checkSelfBuffActiveAndPassiveIndividuality",
    CHECK_PT_BUFF_ACTIVE_AND_PASSIVE_INDIVIDUALITY = "checkPtBuffActiveAndPassiveIndividuality",
    CHECK_OPPONENT_BUFF_ACTIVE_AND_PASSIVE_INDIVIDUALITY = "checkOpponentBuffActiveAndPassiveIndividuality",
    CHECK_PT_ALL_BUFF = "checkPtAllBuff",
    CHECK_OPPONENT_ALL_BUFF = "checkOpponentAllBuff",
    CHECK_PT_ALL_BUFF_INDIVIDUALITY = "checkPtAllBuffIndividuality",
    CHECK_OPPONENT_ALL_BUFF_INDIVIDUALITY = "checkOpponentAllBuffIndividuality",
    COUNT_ALIVE_PT_ALL = "countAlivePtAll",
    COUNT_ALIVE_OPPONENT_ALL = "countAliveOpponentAll",
    CHECK_PT_ALL_BUFF_ACTIVE = "checkPtAllBuffActive",
    CHECK_OPPONENT_ALL_BUFF_ACTIVE = "checkOpponentAllBuffActive",
    COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_PT = "countHigherBuffIndividualitySumPt",
    COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_PT_ALL = "countHigherBuffIndividualitySumPtAll",
    COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_OPPONENT = "countHigherBuffIndividualitySumOpponent",
    COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_OPPONENT_ALL = "countHigherBuffIndividualitySumOpponentAll",
    COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_SELF = "countHigherBuffIndividualitySumSelf",
    COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_PT = "countLowerBuffIndividualitySumPt",
    COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_PT_ALL = "countLowerBuffIndividualitySumPtAll",
    COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_OPPONENT = "countLowerBuffIndividualitySumOpponent",
    COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_OPPONENT_ALL = "countLowerBuffIndividualitySumOpponentAll",
    COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_SELF = "countLowerBuffIndividualitySumSelf",
    COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_PT = "countEqualBuffIndividualitySumPt",
    COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_PT_ALL = "countEqualBuffIndividualitySumPtAll",
    COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_OPPONENT = "countEqualBuffIndividualitySumOpponent",
    COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_OPPONENT_ALL = "countEqualBuffIndividualitySumOpponentAll",
    COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_SELF = "countEqualBuffIndividualitySumSelf",
    EXIST_INDIVIDUALITY_OPPONENT_FRONT = "existIndividualityOpponentFront",
    EXIST_INDIVIDUALITY_OPPONENT_CENTER = "existIndividualityOpponentCenter",
    EXIST_INDIVIDUALITY_OPPONENT_BACK = "existIndividualityOpponentBack",
    TOTAL_COUNT_HIGHER_INDIVIDUALITY_PT = "totalCountHigherIndividualityPt",
    TOTAL_COUNT_HIGHER_INDIVIDUALITY_PT_ALL = "totalCountHigherIndividualityPtAll",
    TOTAL_COUNT_HIGHER_INDIVIDUALITY_OPPONENT = "totalCountHigherIndividualityOpponent",
    TOTAL_COUNT_HIGHER_INDIVIDUALITY_OPPONENT_ALL = "totalCountHigherIndividualityOpponentAll",
    TOTAL_COUNT_HIGHER_INDIVIDUALITY_ALL_FIELD = "totalCountHigherIndividualityAllField",
    TOTAL_COUNT_LOWER_INDIVIDUALITY_PT = "totalCountLowerIndividualityPt",
    TOTAL_COUNT_LOWER_INDIVIDUALITY_PT_ALL = "totalCountLowerIndividualityPtAll",
    TOTAL_COUNT_LOWER_INDIVIDUALITY_OPPONENT = "totalCountLowerIndividualityOpponent",
    TOTAL_COUNT_LOWER_INDIVIDUALITY_OPPONENT_ALL = "totalCountLowerIndividualityOpponentAll",
    TOTAL_COUNT_LOWER_INDIVIDUALITY_ALL_FIELD = "totalCountLowerIndividualityAllField",
    TOTAL_COUNT_EQUAL_INDIVIDUALITY_PT = "totalCountEqualIndividualityPt",
    TOTAL_COUNT_EQUAL_INDIVIDUALITY_PT_ALL = "totalCountEqualIndividualityPtAll",
    TOTAL_COUNT_EQUAL_INDIVIDUALITY_OPPONENT = "totalCountEqualIndividualityOpponent",
    TOTAL_COUNT_EQUAL_INDIVIDUALITY_OPPONENT_ALL = "totalCountEqualIndividualityOpponentAll",
    TOTAL_COUNT_EQUAL_INDIVIDUALITY_ALL_FIELD = "totalCountEqualIndividualityAllField",
    PT_FRONT_DEAD_EQUAL = "ptFrontDeadEqual",
    PT_CENTER_DEAD_EQUAL = "ptCenterDeadEqual",
    PT_BACK_DEAD_EQUAL = "ptBackDeadEqual",
    COUNT_HIGHER_INDIVIDUALITY_PT_FRONT = "countHigherIndividualityPtFront",
    COUNT_HIGHER_INDIVIDUALITY_PT_CENTER = "countHigherIndividualityPtCenter",
    COUNT_HIGHER_INDIVIDUALITY_PT_BACK = "countHigherIndividualityPtBack",
    COUNT_HIGHER_INDIVIDUALITY_OPPONENT_FRONT = "countHigherIndividualityOpponentFront",
    COUNT_HIGHER_INDIVIDUALITY_OPPONENT_CENTER = "countHigherIndividualityOpponentCenter",
    COUNT_HIGHER_INDIVIDUALITY_OPPONENT_BACK = "countHigherIndividualityOpponentBack",
    COUNT_LOWER_INDIVIDUALITY_PT_FRONT = "countLowerIndividualityPtFront",
    COUNT_LOWER_INDIVIDUALITY_PT_CENTER = "countLowerIndividualityPtCenter",
    COUNT_LOWER_INDIVIDUALITY_PT_BACK = "countLowerIndividualityPtBack",
    COUNT_LOWER_INDIVIDUALITY_OPPONENT_FRONT = "countLowerIndividualityOpponentFront",
    COUNT_LOWER_INDIVIDUALITY_OPPONENT_CENTER = "countLowerIndividualityOpponentCenter",
    COUNT_LOWER_INDIVIDUALITY_OPPONENT_BACK = "countLowerIndividualityOpponentBack",
    COUNT_EQUAL_INDIVIDUALITY_PT_FRONT = "countEqualIndividualityPtFront",
    COUNT_EQUAL_INDIVIDUALITY_PT_CENTER = "countEqualIndividualityPtCenter",
    COUNT_EQUAL_INDIVIDUALITY_PT_BACK = "countEqualIndividualityPtBack",
    COUNT_EQUAL_INDIVIDUALITY_OPPONENT_FRONT = "countEqualIndividualityOpponentFront",
    COUNT_EQUAL_INDIVIDUALITY_OPPONENT_CENTER = "countEqualIndividualityOpponentCenter",
    COUNT_EQUAL_INDIVIDUALITY_OPPONENT_BACK = "countEqualIndividualityOpponentBack",
    CHECK_PRECEDING_ENEMY = "checkPrecedingEnemy",
    COUNT_HIGHER_REMAIN_TURN = "countHigherRemainTurn",
    COUNT_LOWER_REMAIN_TURN = "countLowerRemainTurn",
    COUNT_HIGHER_AI_171 = "countHigherAi171",
    COUNT_LOWER_AI_172 = "countLowerAi172",
    COUNT_EQUAL_AI_173 = "countEqualAi173",
    CHECK_AI_174 = "checkAi174",
    CHECK_SELF_NPTURN_HIGHER = "checkSelfNpturnHigher",
    CHECK_SELF_NPTURN_LOWER = "checkSelfNpturnLower",
    CHECK_USE_SKILL_THISTURN = "checkUseSkillThisturn",
    COUNT_CHAIN_HIGHER = "countChainHigher",
    COUNT_CHAIN_LOWER = "countChainLower",
    COUNT_CHAIN_EQUAL = "countChainEqual",
    CHECK_SELECT_CHAIN = "checkSelectChain",
    COUNT_PLAYER_NP_HIGHER = "countPlayerNpHigher",
    COUNT_PLAYER_NP_LOWER = "countPlayerNpLower",
    COUNT_PLAYER_NP_EQUAL = "countPlayerNpEqual",
    COUNT_PLAYER_SKILL_HIGHER = "countPlayerSkillHigher",
    COUNT_PLAYER_SKILL_LOWER = "countPlayerSkillLower",
    COUNT_PLAYER_SKILL_EQUAL = "countPlayerSkillEqual",
    COUNT_PLAYER_SKILL_HIGHER_INCLUDE_MASTER_SKILL = "countPlayerSkillHigherIncludeMasterSkill",
    COUNT_PLAYER_SKILL_LOWER_INCLUDE_MASTER_SKILL = "countPlayerSkillLowerIncludeMasterSkill",
    COUNT_PLAYER_SKILL_EQUAL_INCLUDE_MASTER_SKILL = "countPlayerSkillEqualIncludeMasterSkill",
    TOTAL_TURN_HIGHER = "totalTurnHigher",
    TOTAL_TURN_LOWER = "totalTurnLower",
    TOTAL_TURN_EQUAL = "totalTurnEqual",
    CHECK_WAR_BOARD_SQUARE_INDIVIDUALITY = "checkWarBoardSquareIndividuality",
    CHECK_PT_HIGHER_NPGAUGE = "checkPtHigherNpgauge",
    CHECK_SELF_HIGHER_NPGAUGE = "checkSelfHigherNpgauge",
}

export enum NiceAiActType {
    NONE = "none",
    RANDOM = "random",
    ATTACK = "attack",
    SKILL_RANDOM = "skillRandom",
    SKILL1 = "skill1",
    SKILL2 = "skill2",
    SKILL3 = "skill3",
    ATTACK_A = "attackA",
    ATTACK_B = "attackB",
    ATTACK_Q = "attackQ",
    ATTACK_A_CRITICAL = "attackACritical",
    ATTACK_B_CRITICAL = "attackBCritical",
    ATTACK_Q_CRITICAL = "attackQCritical",
    ATTACK_CRITICAL = "attackCritical",
    SKILL_ID = "skillId",
    SKILL_ID_CHECKBUFF = "skillIdCheckbuff",
    RESURRECTION = "resurrection",
    PLAY_MOTION = "playMotion",
    MESSAGE = "message",
    MESSAGE_GROUP = "messageGroup",
    NOBLE_PHANTASM = "noblePhantasm",
    BATTLE_END = "battleEnd",
    LOSE_END = "loseEnd",
    BATTLE_END_NOT_RELATED_SURVIVAL_STATUS = "battleEndNotRelatedSurvivalStatus",
    CHANGE_THINKING = "changeThinking",
}

export enum NiceAiActTarget {
    NONE = "none",
    RANDOM = "random",
    HP_HIGHER = "hpHigher",
    HP_LOWER = "hpLower",
    NPTURN_LOWER = "npturnLower",
    NPGAUGE_HIGHER = "npgaugeHigher",
    REVENGE = "revenge",
    INDIVIDUALITY_ACTIVE = "individualityActive",
    BUFF_ACTIVE = "buffActive",
    FRONT = "front",
    CENTER = "center",
    BACK = "back",
}

export enum NiceAiActNum {
    NOMAL = "nomal",
    ANYTIME = "anytime",
    REACTION_PLYAER_SKILL = "reactionPlyaerSkill",
    REACTION_ENEMYTURN_START = "reactionEnemyturnStart",
    REACTION_ENEMYTURN_END = "reactionEnemyturnEnd",
    REACTION_DEAD = "reactionDead",
    REACTION_PLAYERACTIONEND = "reactionPlayeractionend",
    REACTION_WAVESTART = "reactionWavestart",
    MAXNP = "maxnp",
    AFTER_TURN_PLAYER_END = "afterTurnPlayerEnd",
    USENP_TARGET = "usenpTarget",
    REACTION_TURNSTART = "reactionTurnstart",
    REACTION_PLAYERACTIONSTART = "reactionPlayeractionstart",
    REACTION_ENTRY_UNIT = "reactionEntryUnit",
    REACTION_BEFORE_RESURRECTION = "reactionBeforeResurrection",
    REACTION_BEFORE_DEAD = "reactionBeforeDead",
    SHIFT_SERVANT_AFTER = "shiftServantAfter",
    REACTION_BEFORE_MOVE_WAVE = "reactionBeforeMoveWave",
    REACTION_ENEMY_TURN_START_PRIORITY = "reactionEnemyTurnStartPriority",
    REACTION_ENEMY_TURN_END_PRIORITY = "reactionEnemyTurnEndPriority",
    UNKNOWN = "unknown",
}

export enum NiceMissionType {
    NONE = "none",
    EVENT = "event",
    WEEKLY = "weekly",
    DAILY = "daily",
    EXTRA = "extra",
    LIMITED = "limited",
    COMPLETE = "complete",
    RANDOM = "random",
}

export enum NiceMissionRewardType {
    GIFT = "gift",
    EXTRA = "extra",
    SET = "set",
}

export enum NiceMissionProgressType {
    NONE = "none",
    REGIST = "regist",
    OPEN_CONDITION = "openCondition",
    START = "start",
    CLEAR = "clear",
    ACHIEVE = "achieve",
}

export enum NiceLotteryFlag {
    NONE = "none",
    LIMIT_RESET = "limitReset",
}

export enum NiceBgmFlag {
    IS_NOT_RELEASE = "isNotRelease",
}

export enum NiceSvtFrameType {
    BLACK = "black",
    BRONZE = "bronze",
    SILVER = "silver",
    GOLD = "gold",
    FRAME_0801 = "frame0801",
    FRAME_0802 = "frame0802",
    FRAME_0803 = "frame0803",
    FRAME_0804 = "frame0804",
}

export enum NiceCommonConsumeType {
    ITEM = "item",
    AP = "ap",
}

export enum NiceEventRewardSceneFlag {
    NPC_GUIDE = "npcGuide",
    IS_CHANGE_SVT_BY_CHANGED_TAB = "isChangeSvtByChangedTab",
    IS_HIDE_TAB = "isHideTab",
}

export enum NiceAiCondTarget {
    NONE = "none",
    FIELD = "field",
    SELF = "self",
    PT = "pt",
    OPPONENT = "opponent",
    PT_FIELD = "ptField",
    OPPONENT_FIELD = "opponentField",
    PT_ALL = "ptAll",
    OPPONENT_ALL = "opponentAll",
    OPPONENT_FRONT = "opponentFront",
    OPPONENT_CENTER = "opponentCenter",
    OPPONENT_BACK = "opponentBack",
    ALL_FIELD = "allField",
    PT_FRONT = "ptFront",
    PT_CENTER = "ptCenter",
    PT_BACK = "ptBack",
}

export enum NiceAiCondParameter {
    NONE = "none",
    TURN = "turn",
    SPACE = "space",
    PREV_ACTID = "prevActid",
    PREV_ACTTYPE = "prevActtype",
    HP = "hp",
    NPGAUGE = "npgauge",
    TDTURN = "tdturn",
    ACT_COUNT = "actCount",
    ACT_COUNT_THISTURN = "actCountThisturn",
    TURN_FIELD = "turnField",
    TURN_ACT_COUNT = "turnActCount",
    BUFF_ID = "buffId",
    INDIVIDUALITY = "individuality",
    BUFF_INDIVIDUALITY = "buffIndividuality",
    BUFF_ACTIVE_INDIVIDUALITY = "buffActiveIndividuality",
    RAID_HP = "raidHp",
    RAID_COUNT = "raidCount",
    RAID_COUNT_VALUE = "raidCountValue",
    COUNT_ALIVE = "countAlive",
    COUNT_REST = "countRest",
    COUNT_ITEM = "countItem",
    COUNT_BUFFCOUNT_INDIVIDUALITY = "countBuffcountIndividuality",
    BUFF_ACTIVE_ID = "buffActiveId",
    ENEMY_MASTER_COMMAND_SPELL_COUNT = "enemyMasterCommandSpellCount",
    COUNT_STAR = "countStar",
    TARGET_POSITION = "targetPosition",
    COUNT_TARGET_BUFF_INDIVIDUALITY_SUM = "countTargetBuffIndividualitySum",
    DEAD = "dead",
    PRECEDING_ENEMY = "precedingEnemy",
    REMAIN_TURN = "remainTurn",
    AVALON_145566 = "avalon145566",
    CHECK_PARAMATER_32 = "checkParamater32",
    CHAIN_COUNT = "chainCount",
    CHECK_TARGET_SKILL_THISTURN = "checkTargetSkillThisturn",
    CHECK_SELECT_CHAIN = "checkSelectChain",
    COUNT_PLAYER_NP = "countPlayerNp",
    COUNT_PLAYER_SKILL = "countPlayerSkill",
    COUNT_PLAYER_SKILL_INCLUDE_MASTER_SKILL = "countPlayerSkillIncludeMasterSkill",
    TOTAL_TURN = "totalTurn",
    WAR_BOARD_SQUARE_INDIVIDUALITY = "warBoardSquareIndividuality",
}

export enum NiceAiCondRefine {
    ANY = "any",
    ALL = "all",
    HIGHER = "higher",
    LOWER = "lower",
    TOTAL_COUNT = "totalCount",
}

export enum NiceAiCondCheck {
    NONE = "none",
    EQUAL = "equal",
    EQUAL_NOT = "equalNot",
    HIGHER = "higher",
    LOWER = "lower",
    MULTIPLE = "multiple",
    EXIST = "exist",
}

export enum NiceTdEffectFlag {
    SUPPORT = "support",
    ATTACK_ENEMY_ALL = "attackEnemyAll",
    ATTACK_ENEMY_ONE = "attackEnemyOne",
}

export enum NiceCombineAdjustTarget {
    COMBINE_QP = "combineQp",
    COMBINE_EXP = "combineExp",
    ACTIVE_SKILL = "activeSkill",
    LARGE_SUCCESS = "largeSuccess",
    SUPER_SUCCESS = "superSuccess",
    LIMIT_QP = "limitQp",
    LIMIT_ITEM = "limitItem",
    SKILL_QP = "skillQp",
    SKILL_ITEM = "skillItem",
    TREASURE_DEVICE_QP = "treasureDeviceQp",
    TREASURE_DEVICE_ITEM = "treasureDeviceItem",
    QUEST_AP = "questAp",
    QUEST_EXP = "questExp",
    QUEST_QP = "questQp",
    QUEST_DROP = "questDrop",
    SVTEQUIP_COMBINE_QP = "svtequipCombineQp",
    SVTEQUIP_COMBINE_EXP = "svtequipCombineExp",
    SVTEQUIP_LARGE_SUCCESS = "svtequipLargeSuccess",
    SVTEQUIP_SUPER_SUCCESS = "svtequipSuperSuccess",
    QUEST_EVENT_POINT = "questEventPoint",
    ENEMY_SVT_CLASS_PICK_UP = "enemySvtClassPickUp",
    EVENT_EACH_DROP_NUM = "eventEachDropNum",
    EVENT_EACH_DROP_RATE = "eventEachDropRate",
    QUEST_FP = "questFp",
    QUEST_AP_FIRST_TIME = "questApFirstTime",
    DAILY_DROP_UP = "dailyDropUp",
    EXCHANGE_SVT_COMBINE_EXP = "exchangeSvtCombineExp",
    QUEST_USE_CONTINUE_ITEM = "questUseContinueItem",
    FRIEND_POINT_GACHA_FREE_DRAW_NUM = "friendPointGachaFreeDrawNum",
    QUEST_USE_FRIENDSHIP_UP_ITEM = "questUseFriendshipUpItem",
    QUEST_FRIENDSHIP = "questFriendship",
    LARGE_SUCCESS_BY_CLASS = "largeSuccessByClass",
    SUPER_SUCCESS_BY_CLASS = "superSuccessByClass",
    EXCHANGE_SVT = "exchangeSvt",
}

export enum NiceEventCombineCalc {
    ADDITION = "addition",
    MULTIPLICATION = "multiplication",
    FIXED_VALUE = "fixedValue",
}

export enum NiceEventWorkType {
    MILITSRY_AFFAIRS = "militsryAffairs",
    INTERNAL_AFFAIRS = "internalAffairs",
    FARMMING = "farmming",
}

export enum NiceEventFortificationSvtType {
    USER_SVT = "userSvt",
    NPC = "npc",
    NONE = "none",
}

export enum NiceSvtClassSupportGroupType {
    ALL = "all",
    SABER = "saber",
    ARCHER = "archer",
    LANCER = "lancer",
    RIDER = "rider",
    CASTER = "caster",
    ASSASSIN = "assassin",
    BERSERKER = "berserker",
    EXTRA = "extra",
    MIX = "mix",
    NOT_SUPPORT = "notSupport",
}

export enum NiceRestrictionType {
    INDIVIDUALITY = "individuality",
    RARITY = "rarity",
    TOTAL_COST = "totalCost",
    LV = "lv",
    SUPPORT_ONLY = "supportOnly",
    UNIQUE_SVT_ONLY = "uniqueSvtOnly",
    FIXED_SUPPORT_POSITION = "fixedSupportPosition",
    FIXED_MY_SVT_INDIVIDUALITY_POSITION_MAIN = "fixedMySvtIndividualityPositionMain",
    FIXED_MY_SVT_INDIVIDUALITY_SINGLE = "fixedMySvtIndividualitySingle",
    SVT_NUM = "svtNum",
    MY_SVT_NUM = "mySvtNum",
    MY_SVT_OR_NPC = "mySvtOrNpc",
    ALLOUT_BATTLE_UNIQUE_SVT = "alloutBattleUniqueSvt",
    FIXED_SVT_INDIVIDUALITY_POSITION_MAIN = "fixedSvtIndividualityPositionMain",
    UNIQUE_INDIVIDUALITY = "uniqueIndividuality",
    MY_SVT_OR_SUPPORT = "mySvtOrSupport",
    DATA_LOST_BATTLE_UNIQUE_SVT = "dataLostBattleUniqueSvt",
}

export enum NiceRestrictionRangeType {
    NONE = "none",
    EQUAL = "equal",
    NOT_EQUAL = "notEqual",
    ABOVE = "above",
    BELOW = "below",
    BETWEEN = "between",
}

export enum NiceFrequencyType {
    ONCE = "once",
    ONCE_UNTIL_REBOOT = "onceUntilReboot",
    EVERY_TIME = "everyTime",
    VALENTINE = "valentine",
    EVERY_TIME_AFTER = "everyTimeAfter",
    NONE = "none",
}

export enum NiceCommandCardAttackType {
    ONE = "one",
    ALL = "all",
}

export enum NiceSpotOverwriteType {
    NONE = "none",
    FLAG = "flag",
    PATH_POINT_RATIO = "pathPointRatio",
    PATH_POINT_RATIO_LIMIT = "pathPointRatioLimit",
    NAME_PANEL_OFFSET_X = "namePanelOffsetX",
    NAME_PANEL_OFFSET_Y = "namePanelOffsetY",
    NAME = "name",
}

export enum NiceBuffConvertType {
    NONE = "none",
    BUFF = "buff",
    INDIVIDUALITY = "individuality",
}

export enum NiceBuffConvertLimitType {
    ALL = "all",
    SELF = "self",
}

export enum NiceNpcServantFollowerFlag {
    NPC = "npc",
    HIDE_SUPPORT = "hideSupport",
    NOT_USED_TREASURE_DEVICE = "notUsedTreasureDevice",
    NO_DISPLAY_BONUS_ICON = "noDisplayBonusIcon",
    APPLY_SVT_CHANGE = "applySvtChange",
    HIDE_EQUIP = "hideEquip",
    NO_DISPLAY_BONUS_ICON_EQUIP = "noDisplayBonusIconEquip",
    HIDE_TREASURE_DEVICE_LV = "hideTreasureDeviceLv",
    HIDE_TREASURE_DEVICE_DETAIL = "hideTreasureDeviceDetail",
    HIDE_RARITY = "hideRarity",
    NOT_CLASS_BOARD = "notClassBoard",
}

export enum NiceClassBoardSquareFlag {
    START = "start",
    BLANK = "blank",
}

export enum NiceClassBoardSkillType {
    NONE = "none",
    PASSIVE = "passive",
    COMMAND_SPELL = "commandSpell",
}

export enum NiceWarBoardStageSquareType {
    NORMAL = "normal",
    ITEM = "item",
    EFFECT = "effect",
    TREASURE = "treasure",
    WALL = "wall",
}

export enum NiceWarBoardTreasureRarity {
    COMMON = "common",
    RARE = "rare",
    SRARE = "srare",
    COMMON_PLUS = "commonPlus",
    RARE_PLUS = "rarePlus",
    SRARE_PLUS = "srarePlus",
    COMMON_PLUS2 = "commonPlus2",
    RARE_PLUS2 = "rarePlus2",
    SRARE_PLUS2 = "srarePlus2",
    ITEM_ICON = "itemIcon",
    ITEM_ICON_PLUS = "itemIconPlus",
    ITEM_ICON_PLUS2 = "itemIconPlus2",
}

export enum NiceBattleFieldEnvironmentGrantType {
    None_ = "none",
    Stage = "stage",
    Function = "function",
}

export enum NiceServantOverwriteType {
    TREASURE_DEVICE = "treasureDevice",
}
